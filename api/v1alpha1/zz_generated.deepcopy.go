// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/api/core/v1"
	"k8s.io/api/policy/v1beta1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UpdateStrategyDelayedRollingUpdate) DeepCopyInto(out *UpdateStrategyDelayedRollingUpdate) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UpdateStrategyDelayedRollingUpdate.
func (in *UpdateStrategyDelayedRollingUpdate) DeepCopy() *UpdateStrategyDelayedRollingUpdate {
	if in == nil {
		return nil
	}
	out := new(UpdateStrategyDelayedRollingUpdate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VCLStatus) DeepCopyInto(out *VCLStatus) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VCLStatus.
func (in *VCLStatus) DeepCopy() *VCLStatus {
	if in == nil {
		return nil
	}
	out := new(VCLStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishCluster) DeepCopyInto(out *VarnishCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishCluster.
func (in *VarnishCluster) DeepCopy() *VarnishCluster {
	if in == nil {
		return nil
	}
	out := new(VarnishCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VarnishCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterBackend) DeepCopyInto(out *VarnishClusterBackend) {
	*out = *in
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	out.Port = in.Port
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterBackend.
func (in *VarnishClusterBackend) DeepCopy() *VarnishClusterBackend {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterBackend)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterList) DeepCopyInto(out *VarnishClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VarnishCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterList.
func (in *VarnishClusterList) DeepCopy() *VarnishClusterList {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VarnishClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterService) DeepCopyInto(out *VarnishClusterService) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterService.
func (in *VarnishClusterService) DeepCopy() *VarnishClusterService {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterSpec) DeepCopyInto(out *VarnishClusterSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int32)
		**out = **in
	}
	in.UpdateStrategy.DeepCopyInto(&out.UpdateStrategy)
	in.Varnish.DeepCopyInto(&out.Varnish)
	out.VCL = in.VCL
	in.Backend.DeepCopyInto(&out.Backend)
	in.Service.DeepCopyInto(&out.Service)
	if in.PodDisruptionBudget != nil {
		in, out := &in.PodDisruptionBudget, &out.PodDisruptionBudget
		*out = new(v1beta1.PodDisruptionBudgetSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterSpec.
func (in *VarnishClusterSpec) DeepCopy() *VarnishClusterSpec {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterStatus) DeepCopyInto(out *VarnishClusterStatus) {
	*out = *in
	in.VCL.DeepCopyInto(&out.VCL)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterStatus.
func (in *VarnishClusterStatus) DeepCopy() *VarnishClusterStatus {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterUpdateStrategy) DeepCopyInto(out *VarnishClusterUpdateStrategy) {
	*out = *in
	if in.RollingUpdate != nil {
		in, out := &in.RollingUpdate, &out.RollingUpdate
		*out = new(appsv1.RollingUpdateStatefulSetStrategy)
		(*in).DeepCopyInto(*out)
	}
	if in.DelayedRollingUpdate != nil {
		in, out := &in.DelayedRollingUpdate, &out.DelayedRollingUpdate
		*out = new(UpdateStrategyDelayedRollingUpdate)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterUpdateStrategy.
func (in *VarnishClusterUpdateStrategy) DeepCopy() *VarnishClusterUpdateStrategy {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterUpdateStrategy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterVCL) DeepCopyInto(out *VarnishClusterVCL) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterVCL.
func (in *VarnishClusterVCL) DeepCopy() *VarnishClusterVCL {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterVCL)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VarnishClusterVarnish) DeepCopyInto(out *VarnishClusterVarnish) {
	*out = *in
	in.Resources.DeepCopyInto(&out.Resources)
	if in.ImagePullSecret != nil {
		in, out := &in.ImagePullSecret, &out.ImagePullSecret
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VarnishClusterVarnish.
func (in *VarnishClusterVarnish) DeepCopy() *VarnishClusterVarnish {
	if in == nil {
		return nil
	}
	out := new(VarnishClusterVarnish)
	in.DeepCopyInto(out)
	return out
}
