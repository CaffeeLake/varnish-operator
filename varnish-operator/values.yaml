# namespace should match the Namespace created in the Getting Access section of the README.md
namespace: varnish-service-system
# this field should not be changed
namePrefix: varnish-service-

operator:
  varnishImage:
    # Use the name of the imagePullSecret created in the [Getting Access](#getting-access) section above
    imagePullSecretName: docker-reg-secret

    # The host, namespace, name, and tag make up the path used to pull the varnish image, with the form "$host/$namespace/$name:$tag"

    # You might modify the host to be the nearest instance of container registry to the cluster
    host: registry.ng.bluemix.net
    # If you decide to host the varnish image yourself, you may need to change the image namespace or name
    # Note, however, that you cannot use any old version of varnish -- the official image has a sidecar process that monitors the kubernetes API
    namespace: icm-varnish
    name: varnish
    # You might specify a tag version to ensure that you control the lifecycle of what version of varnish is deployed
    tag: 1.1.5
    # pullPolicy is passed directly to the varnish deployment, that controls how the varnish image will be pulled for new containers
    pullPolicy: Always
  controllerImage:
    # Use the name of the imagePullSecret created in the [Getting Access](#getting-access) section above
    imagePullSecretName: docker-reg-secret

    # The host, namespace, name, and tag make up the path used to pull the varnish image, with the form "$host/$namespace/$name:$tag"

    # You might modify the host to be the nearest instance of container registry to the cluster
    host: registry.ng.bluemix.net
    # If you decide to host the varnish image yourself, you may need to change the image namespace or name
    # Note, however, that you cannot use any old version of varnish -- the official image has a sidecar process that monitors the kubernetes API
    namespace: icm-varnish
    name: varnish-controller
    # You might specify a tag version to ensure that you control the lifecycle of what version of varnish is deployed
    tag: 0.0.7
    # pullPolicy is passed directly to the varnish deployment, that controls how the varnish image will be pulled for new containers
    pullPolicy: Always
  # specifies the pod count of the Manager. Right now, the only valid value is 1
  replicas: 1
  # it is unlikely you will need to change the resources values of the operator
  resources:
    limits:
      cpu: 100m
      memory: 30Mi
    requests:
      cpu: 100m
      memory: 20Mi

varnish:
  # there should not be much reason to change any of these port values
  port: 2035
  targetPort: 2035
  exporterPort: 2034
  exporterTargetPort: 2034
  # there should not be much reason to change the directory VCL is written to
  vclDir: /etc/varnish

# the default section describes all of the defaults available for the VarnishService CustomResource.
default:
  # The amount of memory allocated to Varnish on Varnish's startup, in the form of `varnishd -F -s malloc,${varnishMemory} ...`
  varnishMemory: 1024M
  # the name of the file to be maintained through the Kubernetes API (by watching the pods in a deployment)
  backendsFile: backends.vcl
  # the name of the base VCL file with the caching logic. While this file cannot currently be changed, in the future it will possible to customize its behavior
  defaultFile: default.vcl
  # Resources allocated to the Varnish pod through Kubernetes. `requests.memory` Should be greater than `varnishMemory` above
  varnishResources:
    limits:
      cpu: 1
      memory: 2048Mi
    requests:
      cpu: 1
      memory: 2048Mi
  # Resources allocated to the Varnish Exporter pod, which handles metrics for Varnish. Only change these if there is instability in the metrics
  varnishExporterResources:
    limits:
      cpu: 0.2
      memory: 200Mi
    requests:
      cpu: 0.1
      memory: 100Mi
  # restart policy used for Varnish containers
  varnishRestartPolicy: Always
  # Name and path of the EmptyDir volume shared between Varnish and Varnish Exporter. There should not be a reason to change these fields
  sharedVolume:
    name: libvarnish
    path: /var/lib/varnish
  # http path used to confirm liveness of the Varnish container. TODO: Not currently working
  # livenessProbe:
  #   httpPath: /liveness
  #   port: 8080
  # command used to confirm readiness of the Varnish container. Unlikely to need to be changed
  readinessProbe:
    command: /usr/bin/varnishadm,ping
