/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "icm-varnish-k8s-operator/operator/controller/pkg/apis/icm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VarnishServiceLister helps list VarnishServices.
type VarnishServiceLister interface {
	// List lists all VarnishServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VarnishService, err error)
	// VarnishServices returns an object that can list and get VarnishServices.
	VarnishServices(namespace string) VarnishServiceNamespaceLister
	VarnishServiceListerExpansion
}

// varnishServiceLister implements the VarnishServiceLister interface.
type varnishServiceLister struct {
	indexer cache.Indexer
}

// NewVarnishServiceLister returns a new VarnishServiceLister.
func NewVarnishServiceLister(indexer cache.Indexer) VarnishServiceLister {
	return &varnishServiceLister{indexer: indexer}
}

// List lists all VarnishServices in the indexer.
func (s *varnishServiceLister) List(selector labels.Selector) (ret []*v1alpha1.VarnishService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VarnishService))
	})
	return ret, err
}

// VarnishServices returns an object that can list and get VarnishServices.
func (s *varnishServiceLister) VarnishServices(namespace string) VarnishServiceNamespaceLister {
	return varnishServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VarnishServiceNamespaceLister helps list and get VarnishServices.
type VarnishServiceNamespaceLister interface {
	// List lists all VarnishServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VarnishService, err error)
	// Get retrieves the VarnishService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VarnishService, error)
	VarnishServiceNamespaceListerExpansion
}

// varnishServiceNamespaceLister implements the VarnishServiceNamespaceLister
// interface.
type varnishServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VarnishServices in the indexer for a given namespace.
func (s varnishServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VarnishService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VarnishService))
	})
	return ret, err
}

// Get retrieves the VarnishService from the indexer for a given namespace and name.
func (s varnishServiceNamespaceLister) Get(name string) (*v1alpha1.VarnishService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("varnishservice"), name)
	}
	return obj.(*v1alpha1.VarnishService), nil
}
